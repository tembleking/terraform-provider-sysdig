on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

name: Release provider

jobs:
  create-release:
    name: Create release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: true
          prerelease: false

  build:
    name: Build provider
    runs-on: ubuntu-latest
    needs: [create-release]
    strategy:
      matrix:
        include:
          - os: darwin
            arch: amd64
          - os: freebsd
            arch: 386
          - os: freebsd
            arch: amd64
          - os: freebsd
            arch: arm
          - os: linux
            arch: 386
          - os: linux
            arch: amd64
          - os: linux
            arch: arm
          - os: openbsd
            arch: 386
          - os: openbsd
            arch: amd64
          - os: solaris
            arch: amd64
          - os: windows
            arch: 386
          - os: windows
            arch: amd64
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
    
      - name: Build project # This would actually build your project, using zip for an example artifact
        run: |
          VERSION=$([ -z "`git tag -l --contains HEAD`" ] && git rev-parse --short HEAD || git tag -l --contains HEAD)
          GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go build -o terraform-provider-sysdig_$VERSION
          tar -czf "terraform-provider-sysdig-${{ matrix.os }}-${{ matrix.arch }}.tar.gz" terraform-provider-sysdig_$VERSION --remove-files
        
  
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }} 
          asset_path: ./terraform-provider-sysdig-${{ matrix.os }}-${{ matrix.arch }}.tar.gz
          asset_name: terraform-provider-sysdig-${{ matrix.os }}-${{ matrix.arch }}.tar.gz
          asset_content_type: application/tar+gzip
          
